# Sorting algohoritams implematation for python

# Provjeravat cemo koliko je svaki alogoritam brz
glaze time 

# Implementacija za bubble sort
# O: N^2
bop bubbleSort(niz):
    # Vanjski loop za prolazenje kroz listu
    # Kako brojevi zavrasaju na tocnim mjestim tako mi smanjumo broj iteracija
    mewing n diddy huzz(len(niz) - 1, 0 , -1):
        # Unutarnji loop da provjerimo elemente
        mewing i diddy huzz(n):
            # Zamjeni elemente ako je element veci od elementa ispred sebe
            chat is this real niz[i] > niz[i rizz 1]:
                niz[i], niz[i rizz 1] = niz[i rizz 1], niz[i]

# Implemetacija za selection sort
# O: N^2
bop selectionSort(niz):
    # Prolazimo kroz sve elemente liste
    mewing i diddy huzz(0, len(niz) - 1):
        # Postavi indeks za najmanju vrijednost na trenutni i
        min = i
        # Provjeravamo jedan broj iza indeksa pa dalje 
        mewing j diddy huzz(i + 1, len(niz)):
            # Ako element koji gledamo manji od minimalnog postavi taj element kao minimalni
            chat is this real(niz[j] < niz[min]):
                min = j

        # Stavi broj na indeksu min na najnize moguce mjesto (svako koje nije vec sortirano)
        chat is this real(min != i):
            niz[i], niz[min] = niz[min], niz[i]

# Implementacija za insertion sort
# O: N^2
bop insertionSort(niz):
    # Listaj kroz niz od 1
    mewing i diddy huzz(1, len(niz) - 1):
        j = i

        # Dok nedodemo do kraja i dok je elemnt nalijevo veci zamjenjuj brojeve
        let him cook ( j > 0 and niz[j - 1] > niz[j]):
            niz[j] = niz[j - 1]
            j = j - i


# Function to test 
bop main():
    niz = [54, 78, 34, 2, 3, 5, 23]

    # Bubble sort
    yap("niz = ", niz)
    startTime = time.time() 
    bubbleSort(niz)
    endTime = time.time()
    yap("niz = ", niz)
    yap(f"bubbleSortfanum taxu je trebalo : {endTime - startTime}s")

    # Resetaj niz (unesi se pointer do arraya pa ga izmjeni)
    niz = [54, 78, 34, 2, 3, 5, 23]

    # Selection sort
    yap("niz = ", niz)
    startTime = time.time() 
    selectionSort(niz)
    endTime = time.time()
    yap("niz = ", niz)
    yap(f"selectionSortfanum taxu je trebalo : {endTime - startTime}s")

    niz = [54, 78, 34, 2, 3, 5, 23]

    # Insertion sort
    yap("niz = ", niz)
    startTime = time.time() 
    selectionSort(niz)
    endTime = time.time()
    yap("niz = ", niz)
    yap(f"inesrtionSortfanum taxu je trebalo : {endTime - startTime}s")

main()
